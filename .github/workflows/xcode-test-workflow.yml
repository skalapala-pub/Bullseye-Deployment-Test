name: Testing Workflow

on:
  push:
    branches:
      - "main-**"
      - "dev-**"
      - "dev"
  pull_request:
    branches:
        - "main"
        - "dev"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  scheme: ${{ 'default' }}

jobs:
  build:
    name: Build and Test
    runs-on: test-runner

    steps:

      - name: Clear Work Directory
        run: |
         rm -rf *
         pwd
         ls

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Set Destinations
        run: |
          result=$(./.github/workflows/id_devices.sh)
          echo Destination String: $result
          echo "result=$result" >> $GITHUB_ENV

      - name: Build
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`

          xcrun xcodebuild build-for-testing \
          -scheme "$scheme" \
          -"$filetype_parameter" "$file_to_build" \
          -sdk iphoneos \
          -destination generic/platform=iOS \
          -derivedDataPath ./DerivedData \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration | xcpretty && exit ${PIPESTATUS[0]}

      - name: Test
        run: |
          echo Destination String: ${{ env.result }}
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`

          xcrun xcodebuild test-without-building \
          -scheme "$scheme" \
          -"$filetype_parameter" "$file_to_build" \
          ${{ env.result}} \
          -derivedDataPath ./DerivedData \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration \
          -resultBundlePath TestResults | xcpretty && exit ${PIPESTATUS[0]}

      # - name: Generate Results
      #   uses: kishikawakatsumi/xcresulttool@main
      #   with:
      #     path: TestResults.xcresult
      #     show-code-coverage: false
      #   if: success() || failure()

      # - name: Generate Code Coverage
      #   uses: kishikawakatsumi/xcresulttool@main
      #   with:
      #     path: TestResults.xcresult
      #     show-passed-tests: false
      #     title: Code Coverage
      #   if: success() || failure()
  
  generate:
    name: Generate Test Results
    runs-on: test-runner

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3.0.0
      
      - name: Run Action
        uses: kishikawakatsumi/xcresulttool@main
        with:
          path: TestResults.xcresult
          show-code-coverage: false
        if: success() || failure()